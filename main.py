from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import threading
import logging
import config
from database import init_db, get_user_balance, add_user_balance, set_user_balance, save_payment, update_payment_status, get_payment_status, create_active_game, get_active_game_by_stake_and_msg, delete_active_game_by_message_id, get_game_creator_by_message_id, get_active_game_by_stake, ensure_user_exists, get_all_users, get_users_count, remove_user_balance
from crypto_api import CryptoBotAPI
from game_logic import start_dice_game, start_dart_game, start_basketball_game, start_bowling_game, start_slot_game, start_cubix_game, start_dice2_game, start_dart2_game, start_bowling2_game, start_dice3_game, start_dart3_game, start_bowling3_game

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()
crypto_api = CryptoBotAPI(config.CRYPTO_BOT_TOKEN)

# ‚Äî‚Äî‚Äî FSM ‚Äî‚Äî‚Äî
class DepositState(StatesGroup):
    waiting_for_amount = State()

class WithdrawState(StatesGroup):
    waiting_for_amount = State()

def check_payment_timeout(chat_id, bill_id, expected_amount, bot_instance):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(
        _check_payment_with_timeout(chat_id, bill_id, expected_amount, bot_instance)
    )

async def _check_payment_with_timeout(chat_id, bill_id, expected_amount, bot_instance):
    for i in range(30):  # 60 —Å–µ–∫—É–Ω–¥ / 2 = 30 –∏—Ç–µ—Ä–∞—Ü–∏–π
        await asyncio.sleep(2)
        invoice_info = crypto_api.get_invoice(bill_id)
        if invoice_info:
            invoice = invoice_info["result"]
            status = invoice.get("status")
            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–∞ {bill_id}: —Å—Ç–∞—Ç—É—Å = {status}")
            if status == "paid":
                logging.info(f"–°—á–µ—Ç {bill_id} –æ–ø–ª–∞—á–µ–Ω! –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å.")
                update_payment_status(bill_id, True)
                currency_amount = expected_amount  # 1 USD = 1 –≤–∞–ª—é—Ç–∞ –±–æ—Ç–∞
                add_user_balance(chat_id, currency_amount)
                balance = get_user_balance(chat_id)
                try:
                    await bot_instance.send_message(chat_id, f"‚úÖ –°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {currency_amount:.2f} $. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f}.")
                except Exception:
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
                return
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ {bill_id}")
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
    logging.info(f"–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è —Å—á–µ—Ç–∞ {bill_id}")
    try:
        await bot_instance.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã—à–ª–æ.")
    except Exception:
        pass

def main_menu_markup():
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
        [InlineKeyboardButton(text="üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data="games")],
        [InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/don_kazik")],
        [InlineKeyboardButton(text="üë• –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞", url="https://t.me/+7YO0xmsgeeJkMzg1")]
    ])
    return markup

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    ensure_user_exists(message.from_user.id)
    if message.chat.type != "private":
        return
    text = (
        "üé∞–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ –î–æ–Ω–∞.üé∞\n–¢—É—Ç —Ü–∞—Ä–∏—Ç –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∞–∑–∞—Ä—Ç–∞ –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n–î–ª—è –Ω–∞—Å –∫–∞–∂–¥—ã–π –≥–æ—Å—Ç—å ‚Äì —ç—Ç–æ –ø–æ—á–µ—Ç–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å, —á—å–µ –≤—Ä–µ–º—è –∏ –∫–æ–º—Ñ–æ—Ä—Ç –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ. –ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–≥—Ä–∞—Ç—å, –∞ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º, –ø–æ–≥—Ä—É–∑–∏–≤—à–∏—Å—å –≤ –º–∏—Ä –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞–≤–æ–∫\n\n"
        "üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: <a href='https://t.me/don_kazik'>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</a>\n"
        "üë• –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞: <a href='https://t.me/+7YO0xmsgeeJkMzg1'>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</a>\n"
        "–†–∞–∑—Ä–∞–± –≤–µ–ª–∏—á–∞–π—à–∏–π @padadede"
    )
    await message.answer(text, reply_markup=main_menu_markup(), parse_mode="HTML")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∫ –µ—Å—Ç—å) ...
@dp.callback_query(lambda call: call.data in ["balance", "deposit", "withdraw", "games"])
async def handle_callback(call: types.CallbackQuery, state: FSMContext):
    ensure_user_exists(call.from_user.id)
    user_id = call.from_user.id
    if call.data == "balance":
        balance = get_user_balance(user_id)
        await call.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...", show_alert=False)
        await call.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} $.")
    elif call.data == "deposit":
        await call.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USD):", show_alert=False)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USD):")
        await state.set_state(DepositState.waiting_for_amount)
    elif call.data == "withdraw":
        await call.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ $:", show_alert=False)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ $:")
        await state.set_state(WithdrawState.waiting_for_amount)
    elif call.data == "games":
        await call.answer("–ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä:", show_alert=False)
        await call.message.answer(
            "/cub <—Å—Ç–∞–≤–∫–∞> ‚Äî –∏–≥—Ä–∞ –≤ –∫—É–±–∏–∫–∏ (Dice)\n"
            "/dart <—Å—Ç–∞–≤–∫–∞> ‚Äî –¥–∞—Ä—Ç—Å\n"
            "/bask <—Å—Ç–∞–≤–∫–∞> ‚Äî –±–∞—Å–∫–µ—Ç–±–æ–ª\n"
            "/boul <—Å—Ç–∞–≤–∫–∞> ‚Äî –±–æ—É–ª–∏–Ω–≥\n"
            "/slot <—Å—Ç–∞–≤–∫–∞> ‚Äî —Å–ª–æ—Ç—ã\n"
            "/cubix <—Å—Ç–∞–≤–∫–∞> ‚Äî –∫–∞—Å—Ç–æ–º–Ω–∞—è –∏–≥—Ä–∞ —Å 3 –∫—É–±–∞–º–∏\n"
            "/cub2, /dart2 ‚Äî 2 –±—Ä–æ—Å–∫–∞\n"
            "/cub3, /dart3 ‚Äî 3 –±—Ä–æ—Å–∫–∞"
        )

@dp.message(DepositState.waiting_for_amount)
async def process_deposit_amount(message: types.Message, state: FSMContext):
    ensure_user_exists(message.from_user.id)
    if message.chat.type != "private":
        return
    try:
        amount = float(message.text)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        await state.clear()
        return

    invoice = crypto_api.create_invoice(amount, description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} USD = {amount} $")
    if invoice:
        bill_info = invoice["result"]
        bill_id = bill_info["invoice_id"]
        amount = float(bill_info["amount"])

        save_payment(bill_id, message.from_user.id, amount, amount)

        await message.answer(f"–°–æ–∑–¥–∞–Ω —Å—á—ë—Ç –Ω–∞ {amount}$:\n"
                             f"–°—Å—ã–ª–∫–∞: {bill_info['bot_invoice_url']}\n\n"
                             f"–û–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(
            target=check_payment_timeout,
            args=(message.from_user.id, bill_id, amount, bot)
        )
        thread.start()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")
    await state.clear()

@dp.message(WithdrawState.waiting_for_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount_bot_currency = float(message.text)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        await state.clear()
        return

    if amount_bot_currency <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        await state.clear()
        return

    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    if balance < amount_bot_currency:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        await state.clear()
        return

    # –¢–µ–ø–µ—Ä—å 1 –≤–∞–ª—é—Ç–∞ = 1 USD
    amount_usd = amount_bot_currency  # –†–∞–Ω—å—à–µ: amount_bot_currency / 100

    if amount_usd < 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —á–µ–∫–∞
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 0.01 USD.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º —á–µ–∫
    check = crypto_api.create_check("USDT", amount_usd, description=f"–í—ã–≤–æ–¥ {amount_bot_currency} $")
    if check:
        check_info = check["result"]
        check_id = check_info["check_id"]
        amount = float(check_info["amount"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–°–æ–∑–¥–∞–Ω —á–µ–∫ –Ω–∞ {amount}$:\n"
                             f"–°—Å—ã–ª–∫–∞: {check_info['bot_check_url']}")

        # –°–Ω–∏–º–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
        remove_user_balance(user_id, amount_bot_currency)

    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞.")

    await state.clear()

async def handle_game_command(message: types.Message, game_type: str):
    if message.chat.type == "private":
        await message.answer("–ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    try:
        stake = float(message.text.split()[1])  # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
    except (IndexError, ValueError):
        await message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /{game_type} <—Å—Ç–∞–≤–∫–∞>")
        return

    if stake < 0.1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 0.1 $.")
        return

    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    if balance < stake:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    opponent = get_active_game_by_stake(stake, message.chat.id, user_id)
    if opponent:
        if game_type == "cub":
            await start_dice_game(bot, opponent, user_id, stake, message.chat.id)
        elif game_type == "dart":
            await start_dart_game(bot, opponent, user_id, stake, message.chat.id)
        # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏–≥—Ä—É", callback_data=f"accept_game:{stake}:{game_type}")]
        ])
        sent_msg = await message.answer(f" –ò–≥—Ä–∞ {game_type} –Ω–∞ —Å—Ç–∞–≤–∫—É {stake} —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...", reply_markup=markup)
        create_active_game(user_id, stake, message.chat.id, sent_msg.message_id)

@dp.message(Command("balbot"))
async def cmd_balbot(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    balance_data = crypto_api.get_balance()
    if balance_data:
        text = "üí∞ –ë–∞–ª–∞–Ω—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è CryptoBot:\n\n"
        for item in balance_data["result"]:
            currency = item["currency_code"]
            available = item["available"]
            onhold = item["onhold"]
            text += f"{currency}: –¥–æ—Å—Ç—É–ø–Ω–æ {available}, –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ {onhold}\n"
        await message.answer(text)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")

@dp.message(Command("cub"))
async def cmd_cub(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "cub")

@dp.message(Command("dart"))
async def cmd_dart(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "dart")

@dp.message(Command("bask"))
async def cmd_bask(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "bask")

@dp.message(Command("boul"))
async def cmd_boul(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "boul")

@dp.message(Command("slot"))
async def cmd_slot(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "slot")

@dp.message(Command("cubix"))
async def cmd_cubix(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "cubix")

@dp.message(Command("cub2"))
async def cmd_cub2(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "cub2")

@dp.message(Command("dart2"))
async def cmd_dart2(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "dart2")

@dp.message(Command("boul2"))
async def cmd_boul2(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "boul2")

@dp.message(Command("cub3"))
async def cmd_cub3(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "cub3")

@dp.message(Command("dart3"))
async def cmd_dart3(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "dart3")

@dp.message(Command("boul3"))
async def cmd_boul3(message: types.Message):
    ensure_user_exists(message.from_user.id)
    await handle_game_command(message, "boul3")

@dp.message(Command("can"))
async def cmd_cancel_game(message: types.Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë.")
        return

    replied_msg = message.reply_to_message
    game_creator_id = get_game_creator_by_message_id(replied_msg.message_id, replied_msg.chat.id)

    if game_creator_id is None:
        await message.answer("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–æ–π.")
        return

    if game_creator_id != message.from_user.id:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë.")
        return

    try:
        await bot.delete_message(replied_msg.chat.id, replied_msg.message_id)
        delete_active_game_by_message_id(replied_msg.message_id, replied_msg.chat.id)
        await message.answer("‚úÖ –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@dp.message(Command("bal"))
async def cmd_balance(message: types.Message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} $.")

@dp.callback_query(lambda call: call.data.startswith("accept_game:"))
async def accept_game(call: types.CallbackQuery):
    ensure_user_exists(call.from_user.id)
    data = call.data.split(":")
    stake = float(data[1])  # –ë—ã–ª–æ: int(data[1])
    game_type = data[2]
    user2_id = call.from_user.id
    chat_id = call.message.chat.id
    msg_id = call.message.message_id

    logging.info(f"Accept game called: stake={stake}, game_type={game_type}, user2_id={user2_id}, chat_id={chat_id}, msg_id={msg_id}")

    balance = get_user_balance(user2_id)
    if balance < stake:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", show_alert=True)
        return

    opponent = get_active_game_by_stake_and_msg(stake, chat_id, user2_id, msg_id)
    logging.info(f"Opponent found: {opponent}")
    if opponent:
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception as e:
            logging.warning(f"Failed to delete message: {e}")

        if game_type == "cub":
            await start_dice_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "dart":
            await start_dart_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "bask":
            await start_basketball_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "boul":
            await start_bowling_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "slot":
            await start_slot_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "cubix":
            await start_cubix_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "cub2":
            await start_dice2_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "dart2":
            await start_dart2_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "boul2":
            await start_bowling2_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "cub3":
            await start_dice3_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "dart3":
            await start_dart3_game(bot, opponent, user2_id, stake, chat_id)
        elif game_type == "boul3":
            await start_bowling3_game(bot, opponent, user2_id, stake, chat_id)
    else:
        await call.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

# ‚Äî‚Äî‚Äî –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ‚Äî‚Äî‚Äî

def is_admin(user_id):
    return user_id in config.ADMINS

def get_user_display_name(user):
    if user.username:
        return f"@{user.username}"
    else:
        return f"ID {user.id}"

@dp.message(Command("pay"))
async def cmd_pay(message: types.Message):
    ensure_user_exists(message.from_user.id)
    if message.chat.type != "private":
        return
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        args = message.text.split()
        target = args[1]
        amount = int(args[2])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay <username –∏–ª–∏ ID> <—Å—É–º–º–∞>")
        return

    user = None
    user_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ target —á–∏—Å–ª–æ–º (ID)
    if target.isdigit():
        user_id = int(target)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ target —Å @ (username)
        if target.startswith("@"):
            target = target[1:]
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ username
        try:
            chat = await bot.get_chat(target)
            user_id = chat.id
        except Exception:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    if user_id:
        try:
            user = await bot.get_chat(user_id)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
            user = types.User(id=user_id, is_bot=False, first_name="")

        add_user_balance(user_id, amount)
        display_name = get_user_display_name(user)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {display_name} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} $.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            balance = get_user_balance(user_id)
            await bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount} $. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}.")
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command("null"))
async def cmd_null(message: types.Message):
    ensure_user_exists(message.from_user.id)
    if message.chat.type != "private":
        return
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        target = message.text.split()[1]
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /null <username –∏–ª–∏ ID>")
        return

    user_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ target —á–∏—Å–ª–æ–º (ID)
    if target.isdigit():
        user_id = int(target)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ target —Å @ (username)
        if target.startswith("@"):
            target = target[1:]
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ username
        try:
            chat = await bot.get_chat(target)
            user_id = chat.id
        except Exception:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    if user_id:
        try:
            user = await bot.get_chat(user_id)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
            user = types.User(id=user_id, is_bot=False, first_name="")

        set_user_balance(user_id, 0)
        display_name = get_user_display_name(user)
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name} –æ–±–Ω—É–ª—ë–Ω.")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    ensure_user_exists(message.from_user.id)
    user_id = message.from_user.id
    if is_admin(user_id):
        await message.answer("‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def get_list_markup(current_page, total_pages):
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    row = []
    if current_page > 1:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"list_page:{current_page - 1}"))
    if current_page < total_pages:
        row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"list_page:{current_page + 1}"))
    if row:
        markup.inline_keyboard.append(row)
    return markup

@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    ensure_user_exists(message.from_user.id)
    if message.chat.type != "private":
        return
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    page = 1
    limit = 10
    offset = (page - 1) * limit
    users = get_all_users(limit, offset)
    total = get_users_count()
    total_pages = (total + limit - 1) // limit

    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.")
        return

    text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    for user_id, balance in users:
        try:
            user = await bot.get_chat(user_id)
            display_name = get_user_display_name(user)
        except Exception:
            display_name = f"ID {user_id}"
        text += f"{display_name}: {balance} $\n"

    markup = get_list_markup(page, total_pages)
    await message.answer(text, reply_markup=markup)

@dp.callback_query(lambda call: call.data.startswith("list_page:"))
async def handle_list_pagination(call: types.CallbackQuery):
    ensure_user_exists(call.from_user.id)
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    page = int(call.data.split(":")[1])
    limit = 10
    offset = (page - 1) * limit
    users = get_all_users(limit, offset)
    total = get_users_count()
    total_pages = (total + limit - 1) // limit

    if not users:
        await call.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", show_alert=True)
        return

    text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    for user_id, balance in users:
        try:
            user = await bot.get_chat(user_id)
            display_name = get_user_display_name(user)
        except Exception:
            display_name = f"ID {user_id}"
        text += f"{display_name}: {balance} $\n"

    markup = get_list_markup(page, total_pages)
    await call.message.edit_text(text, reply_markup=markup)
    await call.answer()

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())